From 1707869caf5702a234d5db0d0b28a82be55b0a08 Mon Sep 17 00:00:00 2001
From: "yifan.zhou" <yifan.zhou@thundersoft.com>
Date: Mon, 11 Nov 2024 11:54:27 +0800
Subject: [PATCH 3/3] Camera_Teledyne2: Add read func for e2vTopaz.

Change-Id: I103e3738deaba98815f6be7adf6e352640f63c1e
Signed-off-by: yifan.zhou <yifan.zhou@thundersoft.com>
---
 .../cam_sensor_module/cam_sensor/cam_sensor_dev.c  | 70 ++++++++++++----------
 1 file changed, 39 insertions(+), 31 deletions(-)

diff --git a/drivers/cam_sensor_module/cam_sensor/cam_sensor_dev.c b/drivers/cam_sensor_module/cam_sensor/cam_sensor_dev.c
index ac4a019..c5c5dd5 100644
--- a/drivers/cam_sensor_module/cam_sensor/cam_sensor_dev.c
+++ b/drivers/cam_sensor_module/cam_sensor/cam_sensor_dev.c
@@ -9,7 +9,7 @@
 #include "cam_sensor_soc.h"
 #include "cam_sensor_core.h"
 #include "camera_main.h"
-//debugadd start
+
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/init.h>
@@ -19,56 +19,66 @@
 
 #define SYSFS_NODE_NAME "e2v_node"
 
-//static char *value = NULL;
 static int e2v_node_init = 0;
 struct camera_io_master e2v_master_info = {0};
-static uint8_t addr8;
+
+uint32_t g_e2vTopazAddr;
 
 static ssize_t e2v_node_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
 	int ret = 0;
-	int addr = addr8;
-	int reg16;
-	ret = camera_io_dev_read(&e2v_master_info, addr, &reg16, CAMERA_SENSOR_I2C_TYPE_BYTE, CAMERA_SENSOR_I2C_TYPE_WORD);
+	uint32_t reg_addr;
+    uint32_t reg_data;
+
+	if(g_e2vTopazAddr == 0)
+	{
+		CAM_ERR(CAM_SENSOR, "%s: %d, Invalid reg_addr: 0x%02x", __func__, __LINE__, reg_addr);
+		return -EFAULT;
+	}
+
+	reg_addr = 	g_e2vTopazAddr;
+
+	ret = camera_io_dev_read(&e2v_master_info, reg_addr, &reg_data, CAMERA_SENSOR_I2C_TYPE_BYTE, CAMERA_SENSOR_I2C_TYPE_WORD);
+
 	if (ret < 0) {
-		CAM_ERR(CAM_SENSOR, "debugadd Failed to read from addr:0x%x", addr);
+		CAM_ERR(CAM_SENSOR, "%s: %d, Failed to read from reg_addr: 0x%02x", __func__, __LINE__, reg_addr);
 		return -EFAULT;
 	}
-    return snprintf(buf, PAGE_SIZE, "debugadd e2v_node_show: read reg:0x%2x val:0x%4x\n", addr, reg16);
+	CAM_INFO(CAM_SENSOR, "%s: %d, Read reg_addr: 0x%02x successfully, reg_data: 0x%04x", __func__, __LINE__, reg_addr, reg_data);
+
+    return snprintf(buf, 30, "addr:0x%02x data:0x%04x\n", reg_addr, reg_data);
 }
 
 static ssize_t e2v_node_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
 {
 	int ret = 0;
-	unsigned int addr;
-    unsigned int reg;
-	uint16_t reg16;
+	uint32_t reg_addr;
+    uint32_t reg_data;
+
 	struct cam_sensor_i2c_reg_array reg_array = {0};
 	struct cam_sensor_i2c_reg_setting reg_setting = {0};
 
-	CAM_ERR(CAM_SENSOR, "debugadd e2v_node_store: count=%d, buf=%s", count, buf);
+	CAM_INFO(CAM_SENSOR, "%s: %d, buf from userspace: buf=%s, count=%d", __func__, __LINE__, buf, count);
 
-    sscanf(buf, "0x%x 0x%x", &addr, &reg);
+	sscanf(buf, "0x%x 0x%x", &reg_addr, &reg_data);
 
-	CAM_ERR(CAM_SENSOR, "debugadd e2v_node_store: addr = 0x%x, reg = 0x%x", addr, reg);
+	CAM_INFO(CAM_SENSOR, "%s: %d, reg_addr = 0x%02x, reg_data = 0x%04x", __func__, __LINE__, reg_addr, reg_data);
 
-	if (addr == 0)
+	if (reg_addr == 0)
 	{
-		CAM_ERR(CAM_SENSOR, "debugadd e2v_node_store: not support addr == %x, return", addr);
-		return count;
+		CAM_ERR(CAM_SENSOR, "%s: %d, Invalid reg_addr: 0x%02x", __func__, __LINE__, reg_addr);
+		return -EFAULT;
 	}
 
-	addr8 = (uint8_t)addr;
-	reg16 = (uint16_t)reg;
-
-	if(reg16 == 0x9999) {
-		CAM_ERR(CAM_SENSOR, "debugadd e2v_node_store: addr = 0x%x, reg = 0x%x, read.", addr, reg);
+	if(reg_data == 0x9999) {
+		g_e2vTopazAddr = reg_addr;
+		CAM_INFO(CAM_SENSOR, "%s: %d, Call read function: reg_addr = 0x%02x, reg_data = 0x%04x", __func__, __LINE__, reg_addr, reg_data);
 		return count;
 	}
 
 	reg_array = (struct cam_sensor_i2c_reg_array) {
-		.reg_addr = addr8,
-		.reg_data = reg16,
+		.reg_addr = reg_addr,
+		.reg_data = reg_data,
 		.delay = 0,
 		.data_mask = 0,
 	};
@@ -83,11 +93,11 @@ static ssize_t e2v_node_store(struct device *dev, struct device_attribute *attr,
 
 	ret = camera_io_dev_write(&e2v_master_info, &reg_setting);
 	if (ret < 0) {
-		CAM_ERR(CAM_SENSOR, "debugadd Failed to write to addr:0x%x", addr8);
+		CAM_ERR(CAM_SENSOR, "%s: %d, Failed to write to addr:0x%02x", __func__, __LINE__, reg_addr);
 		return -EFAULT;
 	}
 
-	CAM_ERR(CAM_SENSOR, "debugadd e2v_node_store: addr = 0x%x, reg = 0x%x, write.", reg_array.reg_addr, reg_array.reg_data);
+	CAM_INFO(CAM_SENSOR, "%s: %d, Write reg_addr: 0x%02x successfully, reg_data: 0x%04x", __func__, __LINE__, reg_addr, reg_data);
 
     return count;
 }
@@ -99,10 +109,10 @@ int demo_e2v_init(struct device *dev, struct camera_io_master *master)
     int ret;
 
 
-	CAM_ERR(CAM_SENSOR, "debugadd enter e2vtopaz device node init.");
+	CAM_ERR(CAM_SENSOR, "%s: %d, Enter e2vtopaz device node init", __func__, __LINE__);
 
 	if(e2v_node_init == 1) {
-		pr_info("demo node already initialized\n");
+		pr_info("e2v_node module already initialized\n");
 		return 0;
 	}
 
@@ -111,16 +121,14 @@ int demo_e2v_init(struct device *dev, struct camera_io_master *master)
 
     ret = device_create_file(dev, &dev_attr_e2v_node);
     if (ret) {
-//        kfree(value);
         return ret;
     }
 
-    pr_info("Demo module initialized\n");
+    pr_info("e2v_node module initialized\n");
 
 	e2v_node_init = 1;
     return 0;
 }
-//end
 
 static int cam_sensor_subdev_open(struct v4l2_subdev *sd,
 	struct v4l2_subdev_fh *fh)
-- 
2.7.4

