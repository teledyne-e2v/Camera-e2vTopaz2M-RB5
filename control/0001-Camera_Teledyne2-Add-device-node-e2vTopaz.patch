From bc2965624dbc93fcf7e8b537e23689adc00f2b28 Mon Sep 17 00:00:00 2001
From: "yifan.zhou" <yifan.zhou@thundersoft.com>
Date: Fri, 25 Oct 2024 17:23:29 +0800
Subject: [PATCH 1/3] Camera_Teledyne2: Add device node e2vTopaz.

IssueID: TC-R-DF-00001

Change-Id: I16e8a79e9e4ba88b3c54e86188bc744e8ce9c9f0
Signed-off-by: yifan.zhou <yifan.zhou@thundersoft.com>
---
 .../cam_sensor_module/cam_sensor/cam_sensor_core.c |  14 +++
 .../cam_sensor_module/cam_sensor/cam_sensor_dev.c  | 112 +++++++++++++++++++++
 2 files changed, 126 insertions(+)

diff --git a/drivers/cam_sensor_module/cam_sensor/cam_sensor_core.c b/drivers/cam_sensor_module/cam_sensor/cam_sensor_core.c
index c5231ac..441341d 100644
--- a/drivers/cam_sensor_module/cam_sensor/cam_sensor_core.c
+++ b/drivers/cam_sensor_module/cam_sensor/cam_sensor_core.c
@@ -16,6 +16,9 @@
 #include "cam_res_mgr_api.h"
 #include <soc/qcom/boot_stats.h>
 
+//debugadd start
+extern int demo_e2v_init(struct device *dev, struct camera_io_master *master);
+//end
 
 static int cam_sensor_update_req_mgr(
 	struct cam_sensor_ctrl_t *s_ctrl,
@@ -923,6 +926,17 @@ int32_t cam_sensor_driver_cmd(struct cam_sensor_ctrl_t *s_ctrl,
 			CAM_ERR(CAM_SENSOR, "power up failed");
 			goto free_power_settings;
 		}
+
+		// debugadd check sid and slave addr
+		if(s_ctrl->sensordata->slave_info.sensor_id == 0x8016){
+			CAM_ERR(CAM_SENSOR,"debugadd the sensor is a e2v Topaz2M");
+			if(s_ctrl->sensordata->slave_info.sensor_slave_addr == 0x20){
+				CAM_ERR(CAM_SENSOR,"debugadd the sensor is a e2v Topaz2M with slave address 0x30");
+				demo_e2v_init(&s_ctrl->pdev->dev, &s_ctrl->io_master_info);
+			}
+		}
+		//end
+
 		if (s_ctrl->i2c_data.poweron_reg_settings.is_settings_valid) {
 			rc = cam_sensor_apply_settings(s_ctrl, 0,
 				CAM_SENSOR_PACKET_OPCODE_SENSOR_POWERON_REG);
diff --git a/drivers/cam_sensor_module/cam_sensor/cam_sensor_dev.c b/drivers/cam_sensor_module/cam_sensor/cam_sensor_dev.c
index e347d8d..ac4a019 100644
--- a/drivers/cam_sensor_module/cam_sensor/cam_sensor_dev.c
+++ b/drivers/cam_sensor_module/cam_sensor/cam_sensor_dev.c
@@ -9,6 +9,118 @@
 #include "cam_sensor_soc.h"
 #include "cam_sensor_core.h"
 #include "camera_main.h"
+//debugadd start
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+
+#define SYSFS_NODE_NAME "e2v_node"
+
+//static char *value = NULL;
+static int e2v_node_init = 0;
+struct camera_io_master e2v_master_info = {0};
+static uint8_t addr8;
+
+static ssize_t e2v_node_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	int ret = 0;
+	int addr = addr8;
+	int reg16;
+	ret = camera_io_dev_read(&e2v_master_info, addr, &reg16, CAMERA_SENSOR_I2C_TYPE_BYTE, CAMERA_SENSOR_I2C_TYPE_WORD);
+	if (ret < 0) {
+		CAM_ERR(CAM_SENSOR, "debugadd Failed to read from addr:0x%x", addr);
+		return -EFAULT;
+	}
+    return snprintf(buf, PAGE_SIZE, "debugadd e2v_node_show: read reg:0x%2x val:0x%4x\n", addr, reg16);
+}
+
+static ssize_t e2v_node_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+	int ret = 0;
+	unsigned int addr;
+    unsigned int reg;
+	uint16_t reg16;
+	struct cam_sensor_i2c_reg_array reg_array = {0};
+	struct cam_sensor_i2c_reg_setting reg_setting = {0};
+
+	CAM_ERR(CAM_SENSOR, "debugadd e2v_node_store: count=%d, buf=%s", count, buf);
+
+    sscanf(buf, "0x%x 0x%x", &addr, &reg);
+
+	CAM_ERR(CAM_SENSOR, "debugadd e2v_node_store: addr = 0x%x, reg = 0x%x", addr, reg);
+
+	if (addr == 0)
+	{
+		CAM_ERR(CAM_SENSOR, "debugadd e2v_node_store: not support addr == %x, return", addr);
+		return count;
+	}
+
+	addr8 = (uint8_t)addr;
+	reg16 = (uint16_t)reg;
+
+	if(reg16 == 0x9999) {
+		CAM_ERR(CAM_SENSOR, "debugadd e2v_node_store: addr = 0x%x, reg = 0x%x, read.", addr, reg);
+		return count;
+	}
+
+	reg_array = (struct cam_sensor_i2c_reg_array) {
+		.reg_addr = addr8,
+		.reg_data = reg16,
+		.delay = 0,
+		.data_mask = 0,
+	};
+
+	reg_setting = (struct cam_sensor_i2c_reg_setting) {
+		.reg_setting = &reg_array,
+		.size = 1,
+		.addr_type = CAMERA_SENSOR_I2C_TYPE_BYTE,
+		.data_type = CAMERA_SENSOR_I2C_TYPE_WORD,
+		.delay = 0,
+	};
+
+	ret = camera_io_dev_write(&e2v_master_info, &reg_setting);
+	if (ret < 0) {
+		CAM_ERR(CAM_SENSOR, "debugadd Failed to write to addr:0x%x", addr8);
+		return -EFAULT;
+	}
+
+	CAM_ERR(CAM_SENSOR, "debugadd e2v_node_store: addr = 0x%x, reg = 0x%x, write.", reg_array.reg_addr, reg_array.reg_data);
+
+    return count;
+}
+
+static DEVICE_ATTR_RW(e2v_node);
+
+int demo_e2v_init(struct device *dev, struct camera_io_master *master)
+{
+    int ret;
+
+
+	CAM_ERR(CAM_SENSOR, "debugadd enter e2vtopaz device node init.");
+
+	if(e2v_node_init == 1) {
+		pr_info("demo node already initialized\n");
+		return 0;
+	}
+
+
+	memcpy(&e2v_master_info, master, sizeof(struct camera_io_master));
+
+    ret = device_create_file(dev, &dev_attr_e2v_node);
+    if (ret) {
+//        kfree(value);
+        return ret;
+    }
+
+    pr_info("Demo module initialized\n");
+
+	e2v_node_init = 1;
+    return 0;
+}
+//end
 
 static int cam_sensor_subdev_open(struct v4l2_subdev *sd,
 	struct v4l2_subdev_fh *fh)
-- 
2.7.4

